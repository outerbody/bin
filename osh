#!/usr/bin/env ruby

# osh is a command line ssh tunnel manager
#
#      ~/.osh/config 
#      each line reads <shell name> <ssh options>
#
#      host1	-L 3380:localhost:3306 jzmbk@69.20.7.1
#      gs_prod	-p 40782 -L 3399:localhost:3306 -R 6969:localhost:81 apps@example.com
#      gs_qa 	-L 3370:127.0.0.1:3306 apps@qa.example.com
#
#      osh -o <shell name> => opens a tunnel
#      osh -c <shell name> => close a tunnel
#      osh -l              => list all tunnel status
#


require 'fileutils'


###
### => Config
###

OSHRoot = File.expand_path "~/.osh"
ConfigFile  = "#{OSHRoot}/config"
PidsDir     = "#{OSHRoot}/pids"



###
### => Util
###

def highlight(text)
  "\x1b[103;3m#{text}\x1b[0m"
end



###
### => Tube 
###

class Tube
  
  @@map = {}
  @@all = []
  
  attr :name
  #attr :opts
  #attr :tunnels
  
  def initialize(line)
    #(@name, therest) = line.chomp.split(/\s+/,2)
    args = line.chomp.split(/\s+/)
    @name = args.shift
    @opts = []
    @tunnels = []
    while !args.empty? do
      a = args.shift
      case a
      when '-L', '-R'
        @tunnels.push a
        @tunnels.push args.shift
      when '-N'
      else
        @opts.push a
      end
    end
    #puts "new entry [#{@name}] -- #{opts()} -- #{tunnels()} !!"
    
    @@map[@name] = self   
    @@all << @name
  end
  
  def opts()
    @opts.join(' ')
  end
  
  def tunnels()
    @tunnels.join(' ')
  end
  
  def self.each()
    #@@all.each_pair(){|k,v| yield(v)}
    @@all.sort().each(){|k| yield(@@map[k])}
  end
  
  def self.[](name)
    @@map[name] || (puts "No shell named #{name} found in #{ConfigFile}"; exit -1)
  end

  def self.list()
    puts "Tubes:  Name       SSH Options"
    self.each() do |t|
      status = t.is_open? ? ' o ' : '   '
      
      sname = sprintf("%-10s", t.name)
      line = "    #{status} #{sname}"
      
      if !t.tunnels().empty?
        stunnels = t.tunnels() #sprintf("%-16s", t.tunnels())
        stunnels = highlight(stunnels) if t.is_open?
        line +=  " ( #{stunnels} )"
      end

      line +=  " #{t.opts()} - #{t.pid()} "

      puts line
    end
    puts
  end
  
  def is_open?()
    pid = pid()
    if !pid.nil?
      begin
        Process.kill(0,pid)
        status = 'O'
      rescue Exception=>e
        pid = nil
        clean()
      end
    end  
    pid
  end
  
  def start()
    if pid()
      puts "Tunnel #{@name} is already open"
      return
    end
    
    #pid = spawn(command, :out=>:err, :err=>:out)
    pid = fork do 
      exec("ssh -N #{tunnels()} #{opts()}") 
      exit! 127 
    end  
    
    puts "Started #{@name}"# pid #{pid} #{pidfile()}"
    puts "    #{@opts}"
    
    File.open(pidfile(), 'w') do |file|
      file.puts pid
    end
  end
  
  def stop()
    pid = pid()
    if pid
      puts "Stopping #{@name} pid #{pid}"
      Process.kill("HUP", pid)
      clean()
    else  
      puts "#{@name} is not open"
    end
  end

  def clean()
    FileUtils.remove_file(pidfile())
  end
  
  def pidfile()
    "#{PidsDir}/#{@name}.pid"
  end
  
  def pid()
    begin
      File.open(pidfile()) do |file|
        pid = file.gets.chomp.to_i
        return pid
      end
    rescue
      return nil  
    end
  end
  
  def shell()
    puts "Started shell to #{@name} [#{opts}]"# pid #{pid} #{pidfile()}"
    exec("ssh #{opts()}") 
    exit! 127 
  end
  
end






###
### => Controller
###

@command = ARGV.shift

FileUtils.makedirs OSHRoot if ! File.exists?(OSHRoot)
FileUtils.makedirs PidsDir if ! File.exists?(PidsDir)



File.open(ConfigFile) do |file|
  file.each() do |l| 
    next if l =~ /^#/
    next if l =~ /^$/
    Tube.new(l)
  end
end


case(@command)
  
when 'start', '-o', 'open'
  Tube[ARGV.shift].start
  
when 'stop', '-c', 'close'
  Tube[ARGV.shift].stop
  
when '-x'
  Tube.each() do |tube|
    tube.stop if tube.is_open?
  end
when '-s', 'sh', 'shell'
  Tube[ARGV.shift].shell
  
when '-l','list'
  #Tube.list
  
else
  if @command
    sh = Tube[@command]
    #sh.shell if sh
  	sh.start if sh
  end
  
  #else
  puts "usage: #{$0} { (-o|open) name | (-c|close) name | (-l|list) | {-s|-shell} name }"
  puts
end


Tube.list



